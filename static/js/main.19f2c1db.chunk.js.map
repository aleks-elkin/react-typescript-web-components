{"version":3,"sources":["logo.svg","components/ElementsBoard.tsx","components/ElementsButton.tsx","components/ElementsModal.tsx","components/ElementsCheckbox.tsx","components/ElementsAside.tsx","components/ModalComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ElementsBoard","title","children","ElementsButton","size","type","icon","disabled","clickHandler","btnRef","useRef","useEffect","ref","current","buttonListener","e","addEventListener","removeEventListener","undefined","onClick","console","log","grouped","ElementsModal","visible","closeHandler","modalRef","listener","ModalEventsNames","CLOSED","slot","ElementsCheckbox","label","checked","checkedHandler","checkRef","obs","MutationObserver","mutations","forEach","mutation","observe","attributes","disconnect","evt","value","ElementsAside","asideRef","useMutationObserver","dir","ModalComponent","useState","showModal","setShowModal","showAside","setShowAside","checkBox","setCheckBox","Fragment","className","ButtonTypes","ACCEPT","ButtonSizes","MACRO","DANGER","MICRO","PRIMARY","App","color","SECONDARY","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAAe,G,OAAA,IAA0B,kC,8BCG5BA,EAAsD,SAAC,GAG7D,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,SAEA,OACE,0BAAU,aAAYD,EAAtB,SACE,8BAAMC,O,eCOCC,EAMR,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,KAAMC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,aAAcN,EAAe,EAAfA,SAC1CO,EAASC,iBAA+B,MAY/C,OAXCC,qBAAU,WACR,IAAMC,EAAMH,EAAOI,QACnB,GAAKD,GACAJ,EAAL,CACA,IAAMM,EAAiB,SAACC,GAAD,OAAcP,EAAaO,IAGlD,OAFAH,EAAII,iBAAiB,eAAgBF,GAE9B,WACLF,EAAIK,oBAAoB,eAAgBH,OAE1C,CAACL,EAAQD,IACTD,EAED,2BACCH,KAAMA,EACNC,KAAMA,EACNO,IAAKH,EACLF,UAAQ,EACRD,KAAMA,QAAQY,EACdC,QAAS,kBAAKC,QAAQC,IAAI,oBAC1BC,SAAO,EAPR,SASEpB,IAKD,2BACEE,KAAMA,EACNC,KAAMA,EACNO,IAAKH,EACRH,KAAMA,QAAQY,EACdC,QAAS,kBAAKC,QAAQC,IAAI,oBACvBC,SAAO,EANT,SAQGpB,K,QCpDMqB,EAKR,SAAC,GAAsD,IAApDnB,EAAmD,EAAnDA,KAAMH,EAA6C,EAA7CA,MAAOuB,EAAsC,EAAtCA,QAAStB,EAA6B,EAA7BA,SAAUuB,EAAmB,EAAnBA,aAChCC,EAAWhB,iBAA8B,MAiB/C,OAfAC,qBAAU,WACR,IAAMC,EAAMc,EAASb,QACrB,GAAKD,EAAL,CAEA,IAAMe,EAAW,SAACZ,GAChBH,EAAIX,MAAQ,aACZwB,EAAaV,IAIf,OAFAH,EAAII,iBAAiBY,mBAAiBC,OAAQF,GAEvC,WACLf,EAAIK,oBAAoBW,mBAAiBC,OAAQF,OAElD,CAACD,EAAUD,IAEPD,EACL,0BAAU,YAAWpB,EAAM,aAAYH,EAAO,kBAAaW,IAAKc,EAAhE,SACE,qBAAKI,KAAK,OAAV,SAAkB5B,MAGpB,0BAAU,YAAWE,EAAM,aAAYH,EAAOW,IAAKc,EAAnD,SACE,qBAAKI,KAAK,OAAV,SAAkB5B,OC9BX6B,G,OAIR,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,eAAgBhC,EAAe,EAAfA,SAChCiC,EAAWzB,iBAAiC,MASlDC,qBAAU,WACR,IAAMC,EAAMuB,EAAStB,QACrB,GAAKD,EAAL,CAGA,IAAMwB,EAAM,IAAIC,kBAAiB,SAAUC,GACzCA,EAAUC,SAAQ,SAACC,GACK,eAAlBA,EAASnC,OACXe,QAAQC,IAAIT,EAAIqB,SAChBC,IAAiBtB,EAAIqB,gBAO3B,OAFAG,EAAIK,QAAQ7B,EAAK,CAAE8B,YAAY,IAExB,kBAAMN,EAAIO,iBAChB,CAACR,EAAUD,IAEd,IAAM1B,EAAe,SAAUoC,GAC7BxB,QAAQC,IAAIuB,IAGd,OAAOX,EACL,6BACE,aAAYD,EACZpB,IAAKuB,EACLhB,QAASX,EACTyB,SAAO,EACPY,MAAM,IALR,SAOG3C,IAGH,6BACE,aAAY8B,EACZpB,IAAKuB,EACLU,MAAM,IACN1B,QAASX,EAJX,SAMGN,M,iBC9CM4C,EAIR,SAAC,GAAgD,IAA9Cd,EAA6C,EAA7CA,MAAOR,EAAsC,EAAtCA,QAAShB,EAA6B,EAA7BA,aAAcN,EAAe,EAAfA,SAC9B6C,EAAWrC,iBAAmC,MAQpD,OAPAsC,YAAoBD,GAAU,SAACT,GAC7BlB,QAAQC,IAAIiB,GACRS,EAASlC,SACXL,EAAauC,EAASlC,QAAQW,UAAW,MAItCA,EACL,0BAAU,aAAYQ,EAAOpB,IAAKmC,EAAU,kBAAaE,IAAI,OAA7D,SACG/C,IAED,MClBOgD,G,cAAiB,WAC5B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAWMvB,EAAiB,SAAUD,GAC/BwB,GAAaD,GACbD,EAAatB,IAEf,OACE,eAAC,IAAMyB,SAAP,WACE,eAAC,EAAD,CACEtD,KAAK,QACLH,MAAM,gBACNuB,QAAS4B,EACT3B,aAjBe,WACnB4B,GAAcD,IAYZ,UAME,sBAAKO,UAAU,YAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,cAAC,EAAD,CACEzB,eAAgBA,EAChBD,QAASuB,MAGb,qBAAKG,UAAU,gBAAf,+BAEF,sDAGF,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CACEtD,KAAMuD,QAAYC,OAClBzD,KAAM0D,QAAYC,MAClBvD,aAhCiB,WACvBY,QAAQC,IAAI,mBAAqBmC,GACjCC,GAAaD,IA2BT,uBAQA,cAAC,EAAD,CACEnD,KAAMuD,QAAYI,OAClB5D,KAAM0D,QAAYG,MAClBzD,aA9Ca,WACnB6C,GAAcD,IA0CV,8BASF,eAAC,EAAD,CACEpB,MAAM,OACNR,QAAS8B,EACT9C,aAAc0B,EAHhB,UAKE,yBAASJ,KAAK,OAAd,kDACA,sBAAMA,KAAK,OAAX,2BACA,qBAAKA,KAAK,SAAV,SACE,cAAC,EAAD,CAAgBzB,KAAMuD,QAAYM,QAAS9D,KAAM0D,QAAYC,MAA7D,6B,OC5CKI,MApBf,WACE,OACE,sBAAKR,UAAU,MAAf,UACE,2BAAW1D,MAAM,SAASmE,MAAM,QAAhC,SACE,cAAC,EAAD,CACEhE,KAAM0D,QAAYC,MAClB1D,KAAMuD,QAAYS,UAClB/D,KAAK,kBAGT,eAAC,EAAD,CAAeL,MAAM,YAArB,UACE,wBAAQ0D,UAAU,aAAlB,SACE,qBAAKW,IAAKC,EAAMZ,UAAU,WAAWa,IAAI,WAE3C,cAAC,EAAD,WCfYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.19f2c1db.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { FunctionComponent } from \"react\";\nimport \"@tradeshift/elements.board\";\n\nexport const ElementsBoard: FunctionComponent<{ title: string }> = ({\n  title,\n  children,\n}) => {\n  return (\n    <ts-board data-title={title}>\n      <div>{children}</div>\n    </ts-board>\n  );\n};\n","import React, { FunctionComponent, useRef, useEffect } from \"react\";\nimport \"@tradeshift/elements.button\";\nimport {\n  TSButton,\n  sizes as ButtonSizes,\n  types as ButtonTypes,\n} from \"@tradeshift/elements.button\";\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"ts-button\": TSButton &\n        React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n    }\n  }\n}\n\nexport const ElementsButton: FunctionComponent<{\n  size: ButtonSizes;\n  type: ButtonTypes;\n\ticon?: string;\n\tdisabled?: boolean;\n  clickHandler?: (e: Event) => void;\n}> = ({ size, type, icon, disabled, clickHandler, children }) => {\n  const btnRef = useRef<TSButton & HTMLElement>(null);\n  useEffect(() => {\n    const ref = btnRef.current;\n    if (!ref) return;\n    if (!clickHandler) return;\n    const buttonListener = (e: Event) => clickHandler(e);\n    ref.addEventListener(\"button-click\", buttonListener);\n    // remove event on component unmount\n    return () => {\n      ref.removeEventListener(\"button-click\", buttonListener);\n    };\n\t}, [btnRef, clickHandler]);\n\tif(disabled) {\n\t\treturn (\n\t\t\t<ts-button\n\t\t\t\tsize={size}\n\t\t\t\ttype={type}\n\t\t\t\tref={btnRef}\n\t\t\t\tdisabled\n\t\t\t\ticon={icon || undefined}\n\t\t\t\tonClick={()=> console.log('button clicked!')}\n\t\t\t\tgrouped\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</ts-button>\n\t\t);\t\n\t}\n  return (\n    <ts-button\n      size={size}\n      type={type}\n      ref={btnRef}\n\t\t\ticon={icon || undefined}\n\t\t\tonClick={()=> console.log('button clicked!')}\n      grouped\n    >\n      {children}\n    </ts-button>\n  );\n};\n","import React, { FunctionComponent, useRef, useEffect } from \"react\";\nimport \"@tradeshift/elements.modal\";\nimport {\n  TSModal,\n  customEventNames as ModalEventsNames,\n} from \"@tradeshift/elements.modal\";\n\nexport const ElementsModal: FunctionComponent<{\n  size: string;\n  title: string;\n  visible: boolean;\n  closeHandler: (e: Event) => void;\n}> = ({ size, title, visible, children, closeHandler }) => {\n  const modalRef = useRef<TSModal & HTMLElement>(null);\n\n  useEffect(() => {\n    const ref = modalRef.current;\n    if (!ref) return;\n\n    const listener = (e: Event) => {\n      ref.title = \"New title!\";\n      closeHandler(e);\n    };\n    ref.addEventListener(ModalEventsNames.CLOSED, listener);\n    // remove event on component unmount\n    return () => {\n      ref.removeEventListener(ModalEventsNames.CLOSED, listener);\n    };\n  }, [modalRef, closeHandler]);\n\n  return visible ? (\n    <ts-modal data-size={size} data-title={title} data-visible ref={modalRef}>\n      <div slot=\"main\">{children}</div>\n    </ts-modal>\n  ) : (\n    <ts-modal data-size={size} data-title={title} ref={modalRef}>\n      <div slot=\"main\">{children}</div>\n    </ts-modal>\n  );\n};\n","import React, { FunctionComponent, useRef, useEffect } from \"react\";\nimport \"@tradeshift/elements.checkbox/lib/checkbox.esm\";\nimport { TSCheckbox } from \"@tradeshift/elements.checkbox\";\n\nimport useMutationObserver from \"@rooks/use-mutation-observer\";\n\nexport const ElementsCheckbox: FunctionComponent<{\n  label?: string;\n  checked?: boolean;\n  checkedHandler: (checked: boolean) => void;\n}> = ({ label, checked, checkedHandler, children }) => {\n  const checkRef = useRef<TSCheckbox & HTMLElement>(null);\n  // useMutationObserver(checkRef, (mutations: any) => {\n  //   // console.log(mutations);\n  //   if (checkedHandler && checkRef.current) {\n  //     checkedHandler(!!checkRef.current.checked);\n  //     console.log(checkRef.current.checked);\n  //   }\n  // });\n\n  useEffect(() => {\n    const ref = checkRef.current;\n    if (!ref) return;\n\n    // define a new observer\n    const obs = new MutationObserver(function (mutations) {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"attributes\") {\n          console.log(ref.checked);\n          checkedHandler(!!ref.checked);\n        }\n      });\n    });\n    // have the observer observe foo for changes in children\n    obs.observe(ref, { attributes: true });\n\n    return () => obs.disconnect();\n  }, [checkRef, checkedHandler]);\n\n  const clickHandler = function (evt: any) {\n    console.log(evt);\n  };\n\n  return checked ? (\n    <ts-checkbox\n      data-label={label}\n      ref={checkRef}\n      onClick={clickHandler}\n      checked\n      value=\"5\"\n    >\n      {children}\n    </ts-checkbox>\n  ) : (\n    <ts-checkbox\n      data-label={label}\n      ref={checkRef}\n      value=\"5\"\n      onClick={clickHandler}\n    >\n      {children}\n    </ts-checkbox>\n  );\n};\n","import React, { FunctionComponent, useRef, useState } from \"react\";\nimport \"@tradeshift/elements.aside\";\nimport useMutationObserver from \"@rooks/use-mutation-observer\";\n\ndeclare interface TSAsideProps {\n  dir?: \"rtl\" | \"ltr\" | \"auto\";\n  title?: string;\n  visible?: boolean;\n  busy?: string;\n  noCloseOnEscKey?: boolean;\n  hasFoot?: boolean;\n  hasPlatformObject?: boolean;\n}\n\nexport const ElementsAside: FunctionComponent<{\n  label: string;\n  visible: boolean;\n  clickHandler: (visible: boolean) => void;\n}> = ({ label, visible, clickHandler, children }) => {\n  const asideRef = useRef<TSAsideProps & HTMLElement>(null);\n  useMutationObserver(asideRef, (mutations: any) => {\n    console.log(mutations);\n    if (asideRef.current) {\n      clickHandler(asideRef.current.visible || false);\n    }\n  });\n\n  return visible ? (\n    <ts-aside data-title={label} ref={asideRef} data-visible dir=\"auto\">\n      {children}\n    </ts-aside>\n  ) : null;\n};\n","import React, { useState } from \"react\";\nimport { ElementsButton } from \"./ElementsButton\";\nimport { ElementsModal } from \"./ElementsModal\";\nimport { ElementsCheckbox } from \"./ElementsCheckbox\";\nimport { ElementsAside } from \"./ElementsAside\";\nimport { Checkbox } from \"./Checkbox\";\nimport {\n  types as ButtonTypes,\n  sizes as ButtonSizes,\n} from \"@tradeshift/elements.button\";\nimport \"@tradeshift/elements.button-group\";\nimport \"@tradeshift/elements.note\";\n\nexport const ModalComponent = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [showAside, setShowAside] = useState(false);\n  const [checkBox, setCheckBox] = useState(false);\n  const clickHandler = function () {\n    setShowModal(!showModal);\n  };\n  const closeHandler = function () {\n    setShowModal(!showModal);\n  };\n  const clickLeftHandler = function () {\n    console.log(\"is it checked: \" + !checkBox);\n    setCheckBox(!checkBox);\n  };\n  const checkedHandler = function (checked: boolean) {\n    setCheckBox(!checkBox);\n    setShowAside(checked);\n  };\n  return (\n    <React.Fragment>\n      <ElementsModal\n        size=\"large\"\n        title=\"Initial title\"\n        visible={showModal}\n        closeHandler={closeHandler}\n      >\n        <div className=\"top-block\">\n          <div className=\"checkbox-container\">\n            <ElementsCheckbox\n              checkedHandler={checkedHandler}\n              checked={checkBox}\n            />\n          </div>\n          <div className=\"top-block-end\">End block text</div>\n        </div>\n        <h1>Some content here</h1>\n      </ElementsModal>\n\n      <div className=\"button-group\">\n        <ElementsButton\n          type={ButtonTypes.ACCEPT}\n          size={ButtonSizes.MACRO}\n          clickHandler={clickLeftHandler}\n        >\n          Click me!\n        </ElementsButton>\n\n        <ElementsButton\n          type={ButtonTypes.DANGER}\n          size={ButtonSizes.MICRO}\n          clickHandler={clickHandler}\n        >\n          Do not click!\n        </ElementsButton>\n      </div>\n\n      <ElementsAside\n        label=\"Test\"\n        visible={showAside}\n        clickHandler={checkedHandler}\n      >\n        <ts-note slot=\"note\">Takimata sed sea lorem kasd sit est.</ts-note>\n        <span slot=\"main\">Aside content</span>\n        <div slot=\"footer\">\n          <ElementsButton type={ButtonTypes.PRIMARY} size={ButtonSizes.MACRO}>\n            Click\n          </ElementsButton>\n        </div>\n      </ElementsAside>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"@tradeshift/elements/src/vars.css\";\nimport \"./App.css\";\nimport { ElementsBoard } from \"./components/ElementsBoard\";\nimport { ModalComponent } from \"./components/ModalComponent\";\nimport { ElementsButton } from \"./components/ElementsButton\";\nimport {\n  sizes as ButtonSizes,\n  types as ButtonTypes,\n} from \"@tradeshift/elements.button\";\nimport \"@tradeshift/elements.header\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <ts-header title=\"Header\" color=\"white\">\n        <ElementsButton\n          size={ButtonSizes.MACRO}\n          type={ButtonTypes.SECONDARY}\n          icon=\"close-clear\"\n        ></ElementsButton>\n      </ts-header>\n      <ElementsBoard title=\"Main page\">\n        <header className=\"app-header\">\n          <img src={logo} className=\"app-logo\" alt=\"Logo\"></img>\n        </header>\n        <ModalComponent />\n      </ElementsBoard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"@webcomponents/webcomponentsjs/webcomponents-bundle\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}